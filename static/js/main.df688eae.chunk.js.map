{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/PageNavigation/PageNavigation.tsx","components/MainSection/MainSection.tsx","App.tsx","pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PersonInfo/PersonInfo.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","PageNavigation","role","MainSection","App","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","name","sex","slug","PersonInfo","selectedPerson","born","died","fatherName","motherName","mother","father","isSelected","PeopleTable","people","map","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","getPeopleFromServer","useCallback","peopleFromServer","useEffect","useParams","noPeople","length","shouldRenderTable","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.df688eae.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { FC } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink';\n\nexport const PageNavigation = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\n\nexport const MainSection = () => (\n  <main className=\"section\">\n    <div className=\"container\">\n      <Outlet />\n    </div>\n  </main>\n);\n","import { PageNavigation } from './components/PageNavigation';\nimport { MainSection } from './components/MainSection';\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <PageNavigation />\n    <MainSection />\n  </div>\n);\n","export const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\nexport type Props = {\n  person: Person;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n\n  return (\n    <Link\n      to={`../../people/${slug}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\nexport type Props = {\n  person: Person;\n  selectedPerson: string;\n};\n\nexport const PersonInfo: FC<Props> = ({ person, selectedPerson }) => {\n  const {\n    sex, born, died, slug, fatherName, motherName, mother, father,\n  }\n    = person;\n  const isSelected = slug === selectedPerson;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({ 'has-background-warning': isSelected })}\n    >\n      <td><PersonLink person={person} /></td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>{mother ? <PersonLink person={mother} /> : motherName || '-'}</td>\n      <td>{father ? <PersonLink person={father} /> : fatherName || '-'}</td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Person } from '../../types/Person';\nimport { PersonInfo } from '../PersonInfo/PersonInfo';\n\ntype Props = {\n  people: Person[];\n  selectedPerson: string;\n};\n\nexport const PeopleTable: FC<Props> = ({ people, selectedPerson }) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Born</th>\n        <th>Died</th>\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {people.map((person) => (\n        <PersonInfo\n          key={person.slug}\n          person={person}\n          selectedPerson={selectedPerson}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { Person } from '../types';\nimport { PeopleTable } from '../components/PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const getPeopleFromServer = useCallback(async () => {\n    try {\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setIsError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n\n  const { slug = '' } = useParams();\n  const noPeople = !people.length && !isLoading;\n  const shouldRenderTable = !noPeople && !isError && !isLoading;\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {isError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n        {noPeople && (\n          <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n        )}\n\n        {shouldRenderTable\n          && <PeopleTable people={people} selectedPerson={slug} />}\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router, Navigate, Route, Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement).render(\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>,\n);\n"],"sourceRoot":""}